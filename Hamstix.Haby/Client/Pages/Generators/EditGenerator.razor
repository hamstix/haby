@page "/generators/{id:long}"
@using Grpc.Core
@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Models
@using System.Text.Json.Nodes
@using Hamstix.Haby.Shared.Grpc.Generators
@inject Haby.Shared.Grpc.Generators.GeneratorsService.GeneratorsServiceClient GeneratorsService
@inject NavigationManager NavigationManager

<PageTitle>Edit Generator "@_originalStruct?.Name"</PageTitle>

<BreadCrumbsComponent BreadCrumbs="_breadCrumbs"></BreadCrumbsComponent>

@if (_putModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Edit Generator "@_originalStruct.Name"</h1>

    <EditForm Model="@_putModel" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText class="form-control" id="name" @bind-Value="_putModel.Name" />
        </div>
        <div class="mb-3">
            <label for="template" class="form-label">Template</label>
            <InputText class="form-control" id="template" @bind-Value="_putModel.Template" />
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea class="form-control" id="description" @bind-Value="_putModel.Description" cols=60 rows=5 />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-danger" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>

    <AlertComponent @ref="_alertComponent"></AlertComponent>
}

@code {
    [Parameter]
    public long Id { get; set; }

    GeneratorModel? _originalStruct;
    GeneratorUpdateModel? _putModel;

    List<BreadCrumbItem> _breadCrumbs = new();

    AlertComponent _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        _originalStruct = await GeneratorsService.GetByIdAsync(new GetByIdRequest { Id = Id });
        _putModel = CreatePutModel(_originalStruct);

        _breadCrumbs = new()
            {
                new BreadCrumbItem("Generators", false, "/generators"),
                new BreadCrumbItem(_originalStruct.Name, true),
            };
    }

    async Task Save()
    {
        GeneratorModel result;
        try
        {
            result = await GeneratorsService.UpdateAsync(new UpdateRequest { Id = Id, Generator = _putModel });
        }
        catch (RpcException e)
        {
            _alertComponent.SetError(e.Status.Detail);
            return;
        }

        _originalStruct = result;

        _putModel = CreatePutModel(result);
        _alertComponent.ResetStatus();
    }

    void Cancel()
    {
        _putModel = CreatePutModel(_originalStruct);
    }

    GeneratorUpdateModel CreatePutModel(GeneratorModel generator) =>
    new()
        {
            Name = generator.Name,
            Description = generator.Description,
            Template = generator.Template
        };
}
