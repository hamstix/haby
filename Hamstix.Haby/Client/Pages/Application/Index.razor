@page "/application"
@using Grpc.Core
@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Models
@using Hamstix.Haby.Client.Pages.Application.SystemVariables
@using Hamstix.Haby.Shared
@using System.Text.Json.Nodes
@using Hamstix.Haby.Shared.Grpc.System
@inject Haby.Shared.Grpc.System.SystemStatusService.SystemStatusServiceClient SystemStatusService

<PageTitle>Application</PageTitle>

<BreadCrumbsComponent BreadCrumbs="_breadCrumbs"></BreadCrumbsComponent>

@if (_status == null)
{
    <p>Loading ...</p>
}
else
{
    <h3>Registry status: <b>@_status.Status</b></h3>
    @if (_status.Status == RegStatuses.Error)
    {
        <p>Error: <i>@_status.Message</i></p>
    }
    <h4>Registry info</h4>
    <p>
        <span>Version: @_status.Version</span>
        <span>Public Api Version: @_status.ApiVersion</span>
        <span>Db schema initialized: @_status.DbSchemaInitialized</span>
        <span>Environment: @_status.Environment</span>
    </p>

    @if (_status.Status == RegStatuses.NotInitialized
     || _status.Status == RegStatuses.Error)
    {
        <button class="btn btn-primary" @onclick="InitializeRegistry">Initialize</button>
    }

    <SystemVariablesComponent></SystemVariablesComponent>

    <AlertComponent @ref="_alertComponent"></AlertComponent>
}

@code {
    List<BreadCrumbItem> _breadCrumbs = new()
        {
            new BreadCrumbItem("Application", true)
        };

    ApplicationStatusModel? _status;

    AlertComponent _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        _status = await SystemStatusService.GetApplicationStatusAsync(new Google.Protobuf.WellKnownTypes.Empty());
    }

    async Task InitializeRegistry()
    {
        try
        {
            _status = await SystemStatusService.InitializeSchemaAsync(new Google.Protobuf.WellKnownTypes.Empty());
        }
        catch (RpcException e)
        {
            _alertComponent.SetError(e.Status.Detail);
            return;
        }

        _alertComponent.ResetStatus();
    }
}
