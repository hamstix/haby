@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Models
@using Hamstix.Haby.Shared.Api.WebUi.v1.Generators
@using System.Text.Json.Nodes
@using Hamstix.Haby.Shared.Api.WebUi.v1.Keys
@using Hamstix.Haby.Shared.Api.WebUi.v1.SystemVariables
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h4>System variables</h4>

@if (_putModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_putModel" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="configuration" class="form-label">Json object</label>
            <InputTextArea class="form-control" id="configuration" @bind-Value="_putModel.Configuration" cols=60 rows=5 />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-danger" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>

    <AlertComponent @ref="_alertComponent"></AlertComponent>
}

@code {
    JsonSystemVariablesViewModel? _originalStruct;
    JsonSystemVariablesPutViewModel? _putModel;

    AlertComponent _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        _originalStruct = await Http.GetFromJsonAsync<JsonSystemVariablesViewModel>(
          $"api/webui/haby/v1/application/system-variables/json");
        _putModel = CreatePutModel(_originalStruct);
    }

    async Task Save()
    {
        var response = await Http.PutAsJsonAsync(
          $"api/webui/haby/v1/application/system-variables/json",
          _putModel);
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadFromJsonAsync<JsonObject>();
            var message = error?["message"]?.GetValue<string>() ?? string.Empty;
            _alertComponent.SetError(message);
            return;
        }
        var result = await response.Content.ReadFromJsonAsync<JsonSystemVariablesViewModel>();
        _originalStruct = result;

        _putModel = CreatePutModel(result);
        _alertComponent.ResetStatus();
    }

    void Cancel()
    {
        _putModel = CreatePutModel(_originalStruct);
    }

    JsonSystemVariablesPutViewModel CreatePutModel(JsonSystemVariablesViewModel service) =>
    new()
    {
        Configuration = service.Configuration.ToJsonString(new System.Text.Json.JsonSerializerOptions { WriteIndented = true }),
    };
}
