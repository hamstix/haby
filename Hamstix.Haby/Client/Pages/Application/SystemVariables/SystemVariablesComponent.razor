@using Grpc.Core
@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Extensions
@using Hamstix.Haby.Client.Models
@using System.Text.Json.Nodes
@using Haby.Shared.Grpc.System;
@inject NavigationManager NavigationManager
@inject Haby.Shared.Grpc.System.SystemService.SystemServiceClient SystemService

<h4>System variables</h4>

@if (_putModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_putModel" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="configuration" class="form-label">Json object</label>
            <InputTextArea class="form-control" id="configuration" @bind-Value="_putModel.Configuration" cols=60 rows=5 />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-danger" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>

    <AlertComponent @ref="_alertComponent"></AlertComponent>
}

@code {
    SystemVariablesModel? _originalStruct;
    UpdateSystemVariablesRequest? _putModel;

    AlertComponent _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        _originalStruct = await SystemService.GetSystemVariablesAsync(new Google.Protobuf.WellKnownTypes.Empty());

        _putModel = CreatePutModel(_originalStruct);
    }

    async Task Save()
    {
        SystemVariablesModel result;
        try
        {
            result = await SystemService.UpdateSystemVariablesAsync(_putModel);
        }
        catch (RpcException e)
        {
            _alertComponent.SetError(e.Status.Detail);
            return;
        }

        _originalStruct = result;

        _putModel = CreatePutModel(_originalStruct);
        _alertComponent.ResetStatus();
    }

    void Cancel()
    {
        _putModel = CreatePutModel(_originalStruct);
    }

    UpdateSystemVariablesRequest CreatePutModel(SystemVariablesModel service) =>
    new()
        {
            Configuration = service.Configuration.ToJsonObject().ToJsonString(new System.Text.Json.JsonSerializerOptions { WriteIndented = true }),
        };
}
