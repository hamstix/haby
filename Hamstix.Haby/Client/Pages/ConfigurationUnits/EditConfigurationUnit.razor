@page "/configuration-units/{id:long}"
@using Grpc.Core
@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Models
@using Hamstix.Haby.Client.Pages.ConfigurationUnits.Components
@using System.Text.Json.Nodes
@using Hamstix.Haby.Shared.Grpc.ConfigurationUnits
@inject Haby.Shared.Grpc.ConfigurationUnits.ConfigurationUnitsService.ConfigurationUnitsServiceClient CusService
@inject NavigationManager NavigationManager

<PageTitle>Edit configuration unit "@_originalStruct?.Name"</PageTitle>

<BreadCrumbsComponent BreadCrumbs="_breadCrumbs"></BreadCrumbsComponent>

@if (_putModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Edit configuration unit "@_originalStruct.Name"</h1>

    <EditForm Model="@_putModel" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText class="form-control" id="name" @bind-Value="_putModel.Name" />
        </div>
        <div class="mb-3">
            <label for="version" class="form-label">Version</label>
            <InputText class="form-control" id="version" @bind-Value="_putModel.Version" />
        </div>
        <div class="mb-3">
            <label for="template" class="form-label">Template</label>
            <InputTextArea class="form-control" id="template" @bind-Value="_putModel.Template" cols=60 rows=5 />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-danger" type="button" @onclick="Cancel">Cancel</button>
        <button class="btn btn-danger" type="button" @onclick="Reconfigure">Reconfigure</button>
    </EditForm>

    <AlertComponent @ref="_alertComponent"></AlertComponent>

    <VariablesComponent CuId="Id" @ref="VariablesComponent"></VariablesComponent>
}

@code {
    [Parameter]
    public long Id { get; set; }

    ConfigurationUnitModel? _originalStruct;
    ConfigurationUnitUpdateModel? _putModel;
    AlertComponent _alertComponent;

    protected VariablesComponent VariablesComponent;

    List<BreadCrumbItem> _breadCrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        _originalStruct = await CusService.GetByIdAsync(new GetByIdRequest { Id = Id });
        _putModel = CreatePutModel(_originalStruct);

        _breadCrumbs = new()
            {
                new BreadCrumbItem("Configuration Units", false, "/configuration-units"),
                new BreadCrumbItem(_originalStruct.Name, true),
            };
    }

    async Task Save()
    {
        try
        {
            var result = await CusService.UpdateAsync(new UpdateRequest { Id = Id, ConfigurationUnit = _putModel });
            _originalStruct = result;

            _putModel = CreatePutModel(result);
            _alertComponent.SetSuccess("Saved");
        }
        catch (RpcException e)
        {
            _alertComponent.SetError(e.Status.Detail);
            return;
        }
    }

    void Cancel()
    {
        _putModel = CreatePutModel(_originalStruct);
    }

    async Task Reconfigure()
    {
        ReconfigurationResponse result;
        try
        {
            result = await CusService.ReconfigureAsync(new ReconfigurationRequest { Id = Id });
        }
        catch (RpcException e)
        {
            _alertComponent.SetError(e.Status.Detail);
            return;
        }

        if (result.Results.Any(x => x.Results.Any(r => r.Status == ConfigurationResultStatuses.Failed)))
        {
            var errorResults = result
               .Results
               .Where(x => x.Results.Any(r => r.Status == ConfigurationResultStatuses.Failed))
               .ToList();
            var message = System.Text.Json.JsonSerializer.Serialize(errorResults);
            _alertComponent.SetError(message);
        }
        else
        {
            _alertComponent.SetSuccess("Reconfigured");
        }
        await VariablesComponent.Refresh();
    }

    ConfigurationUnitUpdateModel CreatePutModel(ConfigurationUnitModel cu) =>
    new()
        {
            Name = cu.Name,
            Version = cu.Version,
            Template = cu.Template.ToJsonArray().ToJsonString(new System.Text.Json.JsonSerializerOptions { WriteIndented = true }),
        };
}
