@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Models
@using System.Text.Json.Nodes
@using Hamstix.Haby.Shared.Grpc.ConfigurationUnits
@inject Haby.Shared.Grpc.ConfigurationUnits.ConfigurationUnitsService.ConfigurationUnitsServiceClient CusService

<h4>Saved variables</h4>

@if (_variables == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Service</th>
                <th>Name</th>
                <th>Value</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var variable in _variables.OrderBy(x => x.Key).ThenBy(x => x.Service.Name).ThenBy(x => x.Name))
            {
                <tr>
                    <td>@variable.Key</td>
                    <td>@variable.Service.Name</td>
                    <td>@variable.Name</td>
                    <td>@variable.Value?.ToJsonNode()?.ToJsonString()</td>
                    <td><button class="btn" @onclick="@(() => RemoveConstraint(variable))" @onclick:preventDefault="true"><span class="oi oi-trash"></span></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public long CuId { get; set; }

    List<ConfigurationUnitVariableModel>? _variables;

    protected override async Task OnInitializedAsync()
    {
        await LoadVariables();
    }

    public async Task Refresh()
    {
        await LoadVariables();
        StateHasChanged();
    }

    async Task LoadVariables()
    {
        var response = await CusService.GetVariablesAsync(new GetVariablesRequest { Id = CuId });
        _variables = response.Variables.ToList();
    }

    async Task RemoveConstraint(ConfigurationUnitVariableModel variable)
    {
        await CusService.DeleteVariableAsync(
          new DeleteVariableRequest { Id = CuId, Name = variable.Name, Key = variable.Key, ServiceId = variable.Service.Id });
        _variables?.Remove(variable);
    }
}
