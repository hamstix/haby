@page "/configuration-units"
@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Models
@using Hamstix.Haby.Shared.Grpc.ConfigurationUnits
@inject Haby.Shared.Grpc.ConfigurationUnits.ConfigurationUnitsService.ConfigurationUnitsServiceClient CusService

<PageTitle>Configuration Units</PageTitle>

<BreadCrumbsComponent BreadCrumbs="_breadCrumbs"></BreadCrumbsComponent>

<NavLink class="btn" href="configuration-units/add">
    <span class="oi oi-plus"></span>
</NavLink>

@if (_configurationUnits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Version</th>
                <th>Template</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cu in _configurationUnits.OrderBy(x => x.Name))
            {
                <tr>
                    <td>
                        <NavLink href=@($"configuration-units/{cu.Id}")>@cu.Name</NavLink>
                    </td>
                    <td>@cu.Version</td>
                    <td>@CutString(cu.Template.ToJsonArray().ToJsonString())</td>
                    <td>
                        <button class="btn"
                        @onclick="@(() => RemoveCu(cu))"
                        @onclick:preventDefault="true">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<ConfigurationUnitModel>? _configurationUnits;

    List<BreadCrumbItem> _breadCrumbs = new()
        {
            new BreadCrumbItem("Configuration units", true)
        };

    protected override async Task OnInitializedAsync()
    {
        var response = await CusService.GetAllAsync(new GetAllRequest());
        _configurationUnits = response.ConfigurationUnits.ToList();
    }

    public string CutString(string value)
    {
        const int maxLength = 20;
        if (value.Length <= maxLength)
            return value;

        return value.Substring(0, maxLength);
    }

    async Task RemoveCu(ConfigurationUnitModel cu)
    {
        await CusService.DeleteAsync(new DeleteRequest { Id = cu.Id });
        _configurationUnits?.Remove(cu);
    }
}
