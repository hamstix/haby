@page "/configurations/{ConfigurationUnitName}/keys/{Key}/edit"
@using Grpc.Core
@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Models
@using System.Text.Json.Nodes
@using Hamstix.Haby.Shared.Grpc.Configuration
@inject Haby.Shared.Grpc.Configuration.ConfigurationService.ConfigurationServiceClient ConfigurationService

<PageTitle>Configurations</PageTitle>

<BreadCrumbsComponent BreadCrumbs="_breadCrumbs"></BreadCrumbsComponent>

@if (_putModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_putModel" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="configuration" class="form-label">Configuration</label>
            <InputTextArea class="form-control" id="configuration" @bind-Value="_putModel.Configuration" cols=60 rows=5 />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-danger" type="button" @onclick="Cancel">Cancel</button>
        <button class="btn btn-danger" type="button" @onclick="Regenerate">Regenerate</button>
    </EditForm>
}

<AlertComponent @ref="_alertComponent"></AlertComponent>

@code {
    [Parameter]
    public string ConfigurationUnitName { get; set; }

    [Parameter]
    public string Key { get; set; }

    KeyConfigurationCodeModel? _originalStruct;
    UpdateKeyConfigurationModel? _putModel;

    List<BreadCrumbItem> _breadCrumbs = new()
        {
            new BreadCrumbItem("Configurations", false),
            new BreadCrumbItem(string.Empty, false),
            new BreadCrumbItem(string.Empty, false)
        };

    AlertComponent _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        _breadCrumbs = new()
            {
                new BreadCrumbItem("Configurations", false),
                new BreadCrumbItem(ConfigurationUnitName, false),
                new BreadCrumbItem(Key, true)
            };

        _originalStruct = await ConfigurationService.GetKeyConfigurationAsync(new Haby.Shared.Grpc.Configuration.GetKeyConfigurationRequest { CuName = ConfigurationUnitName, KeyName = Key });
        _putModel = CreatePutModel(_originalStruct);
    }

    async Task Save()
    {
        try
        {
            _originalStruct = await ConfigurationService.UpdateKeyConfigurationAsync(
              new UpdateKeyConfigurationRequest { CuName = ConfigurationUnitName, KeyName = Key, KeyConfiguration = _putModel });

            _putModel = CreatePutModel(_originalStruct);
            _alertComponent.SetSuccess("Saved");
        }
        catch (RpcException e)
        {
            _alertComponent.SetError(e.Status.Detail);
            return;
        }
    }

    void Cancel()
    {
        _putModel = CreatePutModel(_originalStruct);
    }

    async Task Regenerate()
    {
        await ConfigurationService.RegenerateKeyConfigAsync(new RegenerateKeyConfigRequest { CuName = ConfigurationUnitName, KeyName = Key });
        
        _originalStruct = await ConfigurationService.UpdateKeyConfigurationAsync(
              new UpdateKeyConfigurationRequest { CuName = ConfigurationUnitName, KeyName = Key, KeyConfiguration = _putModel });

        _putModel = CreatePutModel(_originalStruct);
    }

    UpdateKeyConfigurationModel CreatePutModel(KeyConfigurationCodeModel service) =>
    new()
        {
            Configuration = service.Configuration.ToJsonObject().ToJsonString(new System.Text.Json.JsonSerializerOptions { WriteIndented = true }),
        };
}