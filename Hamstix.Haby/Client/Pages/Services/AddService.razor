@page "/services/add"
@using Grpc.Core
@using Hamstix.Haby.Client.Components
@using Hamstix.Haby.Client.Components.Toast
@using Hamstix.Haby.Client.Models
@using System.Text.Json.Nodes
@using Hamstix.Haby.Shared.Grpc.Plugins
@using Hamstix.Haby.Shared.Grpc.Services
@inject Haby.Shared.Grpc.Plugins.PluginsService.PluginsServiceClient PluginsService
@inject Haby.Shared.Grpc.Services.ServicesService.ServicesServiceClient ServicesService
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<PageTitle>Add new Service</PageTitle>

<BreadCrumbsComponent BreadCrumbs="_breadCrumbs"></BreadCrumbsComponent>

<h1>Add new Service</h1>

@if (_plugins == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_postModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText class="form-control" id="name" @bind-Value="_postModel.Name" />
        </div>
        <div class="mb-3">
            <label for="pluginId" class="form-label">Registered Plugin</label>
            <InputSelect class="form-select" id="pluginId" @bind-Value="_postModel.PluginName">
                <option value="@AppConstants.NonePluginSelected">@AppConstants.NonePluginSelected</option>
                @foreach (var plugin in _plugins)
                {
                    <option value="@plugin.Name">@plugin.Name</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="jsonConfig" class="form-label">Json Config</label>
            <InputTextArea class="form-control" id="jsonConfig" @bind-Value="_postModel.JsonConfig" cols=60 rows=5 />
        </div>
        <div class="mb-3">
            <label for="template" class="form-label">Template</label>
            <InputTextArea class="form-control" id="template" @bind-Value="_postModel.Template" cols=60 rows=5 />
        </div>

        <button class="btn btn-primary" type="submit">Create</button>
    </EditForm>

    <AlertComponent @ref="_alertComponent"></AlertComponent>
}

@code {
    CreateRequest _postModel = new();
    PluginModel[]? _plugins;

    List<BreadCrumbItem> _breadCrumbs = new()
        {
            new BreadCrumbItem("Services", false, "/services"),
            new BreadCrumbItem("Create new service", true),
        };

    AlertComponent _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        var pluginsResponse = await PluginsService.GetAllAsync(new PluginsRequest { ShowOnlyUnused = true });
        _plugins = pluginsResponse.Plugins.ToArray();
    }

    async Task HandleValidSubmit()
    {
        if (_postModel.PluginName == AppConstants.NonePluginSelected)
            _postModel.PluginName = null;
        ServiceModel result;
        try
        {
            result = await ServicesService.CreateAsync(_postModel);
        }
        catch (RpcException e)
        {
            _alertComponent.SetError(e.Status.Detail);
            return;
        }

        _alertComponent.ResetStatus();

        if (result is not null)
            NavigationManager.NavigateTo($"services/{result.Id}");
    }
}
